/* Caskeda Data Markup Language | Complex Data Markup Language
	
	Notes:
	- This file format definition uses a specialized dialect of EBNF.
	- This format can be parsed with one character of lookahead / pushback.
	- This format can be read as a continous stream of data and code.
	- This format can contain both data AND code.
	- This format always uses Unix line terminators.
	- This format always uses the UTF-8 encoding.
	- This format is effectively a LISP.
	- This format is called CDML.
	
	Usecases:
	- Data Driven Programming
	- Readable Data Storage
	- Configuration Files
	- Application Logging
*/

#ENTRYPOINT
file: exec? head body raw
	exec: '#' (.-\n)* // skippable!
	head: map         // must exist!
	body: node_outer* // streamable!
	raw:  ';' .* // raw data steam!

#BETWEEN_TOKENS {
	whitespace: \S*
	line_comment: '//'  (.-\n)*   \n
	blob_comment: '/*' (.-'*/')* '*/'
}

// Primary parsing fork
node_outer: node_typed* node_inner node_range?
	node_typed: '#'~bareword
	node_range: '~' node_inner
node_inner: value | struct | expression

// Value fork
value:
	: '_'
	: 'null'
	: 'true'
	: 'false'
	: bareword
	: number
	: numberword
	: instant
	: esc_string
	: raw_string
	: bit_string

// Structure fork
struct:
	: map
	: list
	: dual
	: path

/* expressions (parser callbacks)
	(box 1 1 1 3 3 3)
	(rgb 255 255 255)
	(if os-name 'windows' THEN)
	(pane "Hi!" width=10 height=7)
	
	- Any character-sequence, excluding whitespace, is allowed as operator.
	- Arguments may be named by prefixing a bareword with an equal-sign.
	- There can be, at most, up to 255 arguments.
*/
expression: '(' operator element* ')'
	operator: .*? \S
	element: (bareword '=')? node_outer ','?

/******************************************************************************/
// value nodes

/* A bareword is a string without quotes, delimited only by whitespace.
	
	normal-string
	normal_string
	normal.string
*/
bareword: \L (\L|'-'|'_'|'.')*

/* numbers (examples)
	0  +1  -1  42
	+12345 -12345
	
	// decimals
	0.00001   0.12345   3.14159
	
	// exponent
	1.4e+10   1.9e-10   10e+100
	
	// leading zeroes
	00000001  00012345
	
	// units (no built-ins)
	1#m  1#kg 1#ms 1#psi
	1#ly 1#em 1#px 1#dpi
	
	// units without type tag
	1m  1kg 1ms 1psi
	1ly 1em 1pt 1dpi
*/
number: sign? (integer decimal? exponen? unit? | numberword)
	integer: digits
	decimal: '.' digits10
	exponen: [eE^] sign digits
	unit: ('#')?~bareword
	sign: [+-]
numberword: 'pi' | 'euler' | 'infinity' | 'infinite' | 'notanumber'

/* number bases (examples)
	0b01
	0o01234567
	0d0123456789
	0x0123456789abcdef
	0x0123456789ABCDEF
*/
digits: digits2 | digits8 | digits10 | digits16
	digits2:  '0b'  <[01]>+
	digits8:  '0o'  <[01234567]>+
	digits10: '0d'? <[0123456789]>+
	digits16: '0x'  <[0123456789ABCDEFabcdef]>+

/* timestamps (All UTC)
	@2017-03-03T18:44:00Z+01:00
	@T18:44:00Z+01:00
	@2017-03-03
	@Z+01:00
*/
instant: '@' date? time? zone?
	date: digits '-' digits{2} '-' digits{2}
	time: 'T' digits{2} >> ':' digits{2} >> ':' digits{2} >> '.' digits
	zone: 'Z' [+-]? digits{2} >> ':' digits{2}

/*
	"string"
*/
esc_string: '"' (.-'"')* '"'

/*
	'string'
*/
raw_string: "'" (.-"'")* "'"

/* fmt `bit string`
	
	Example formats (not part of the parser!):
		str` ... ` // plain multiline [str]ing
		x` ... ` // base16 bytes // he[x]-a-decimal
		w` ... ` // base64 bytes // [w]eb-a-decimal
		xz` ... ` // base16 bytes // he[x]-a-decimal compressed
		wz` ... ` // base64 bytes // [w]eb-a-decimal compressed
*/
bit_string: bareword "`" (.-"`")* "`"

/******************************************************************************/
// struct nodes

/* plain object/map/record
	{}
	{,}
	{a 3}
	{a:3}
	{a 3,}
	{a:3,}
	{a:3,b:3}
	{a 3,b 3}
	
	{
		a: 1
		b: 2
		c: 3
	}
	
	// This works only if all tokens are properly terminated
	{
		a [wow]
		b {wow 2}
		c /wow/3
	}
*/
map: '{' (map_item ','?)* '}'
	map_item: map_key ':'? map_val
	map_key: bareword | esc_string | raw_string
	map_val: node_outer

/* plain list
	[]
	[,]
	[1]
	[1 2 3]
	[1,2,3]
	[1,2,3,]
	[1, 2 3,]
*/
list: '[' (node_outer ','?)* ']'

/* dual
	<>
	
	// attributes (plain object)
	<a:3 b:2 c:1>
	<a:3,b:2,c:1>
	
	// attributes and values ('dual' object/list)
	<a:3 b:2 c:1 ; 1 2 3>
	<a:3 b:2 c:1 ; 1,2,3>
	<a:3,b:2,c:1 ; 1 2 3>
	<a:3,b:2,c:1 ; 1,2,3>
	
	// values (plain list)
	<; 1 2 3>
	<; 1,2,3>
	
	// attributes at start/end allowed
	<a:3,b:2,c:1 ; 1 2 3 ; d:4,e:5,f:6>
	<a:3,b:2,c:1 ; 1,2,3 ; d:4,e:5,f:6>
*/
dual: '<' dual_attrbs? dual_childs? ~ (';' dual_attrbs)? '>'
	dual_attrbs: (map_item ','?)*
	dual_childs: ';' (node_outer ','?)*

/* path
	/a/b/c/1/2/3
*/
path: '/' node_outer path?

/******************************************************************************/
/* // Listing of examples...

_    // unit|infer
null // 'nothing'
true false // boolean logic
pi euler infinity notanumber // number words

// plain numbers
1234567890
12345.6789
1.4e+10
1.9e-10

// numbers with bases
0b01
0o01234567
0d0123456789
0x0123456789abcdef
0x0123456789ABCDEF

// timestamps
@2017-03-03T18:44:00Z+01:00
@T18:44:00Z+01:00
@Z+01:00
@0x12345678

// numbers can have units
90#deg
1024#px
1.0#em

// strings (single word)
normal-string
normal_string
// strings (multiline)
'normal string'
"normal string"

// binary strings (examples)
b16`012345678` // base16
b64`012345678` // base64
b85`012345678` // base85

{a : 3} // Map | Record
[1 2 3] // List | Array
<a : 3 ; 1 2 3> // Dual
/a/b/c/1/2/3    // Path

// Type Tags
#thing VALUE
#thing 12345
#thing [1 2]
#thing "Wow"
#thing <; _>

// Expression
(+ 1 3)
(rgb 255 255 255)
(dialog "Hello, World!" color=red modal=false)

// Ranges and/or Pairs
1 ~ 2
*/